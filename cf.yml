AWSTemplateFormatVersion: '2010-09-09'
Description: Pipeline de CI/CD para Terraform na AWS

Parameters:
  GitHubRepository:
    Type: String
    Description: URL do repositório do GitHub que contém o código do Terraform
  GitHubBranch:
    Type: String
    Description: Nome do branch do GitHub que contém o código do Terraform
  GitHubToken:
    Type: String
    Description: Token de acesso pessoal do GitHub para autenticação
    default: teste

Resources:
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:ListBucket
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Location: !Ref ArtifactStoreBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepository
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub 'TerraformBuild-${AWS::StackName}'
      Description: 'Projeto do CodeBuild para construir e testar o código do Terraform'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: TF_VAR_region
            Value: !Ref AWS::Region
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - echo "Installing Terraform"
                - curl -fsSL https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip -o terraform.zip
                - unzip terraform.zip
                - mv terraform /usr/local/bin/
                - terraform --version
            build:
              commands:
                - echo "Building Terraform"
                - terraform init
                - terraform validate
                - terraform plan
      TimeoutInMinutes: 10

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecs:CreateCluster
                  - ecs:RegisterTaskDefinition
                  - ecs:RunTask
                  - ecs:StopTask
                  - ecs:UpdateService
                  - ecs:DescribeTasks
                  - ecs:ListClusters
                  - ecs:ListTaskDefinitions
                  - ecs:ListTasks
                  - ecs:DescribeClusters
                  - ecs:DescribeTaskDefinition
                  - iam:PassRole
                  - s3:CreateBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - elasticloadbalancing:*
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                Resource: '*'
